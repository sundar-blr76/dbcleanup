plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
    id 'checkstyle'
}

group = 'com.dbcleanup'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-scheduling'
    
    // Database
    implementation 'org.postgresql:postgresql:42.7.1'
    implementation 'com.zaxxer:HikariCP:5.1.0'
    
    // Redis for distributed locking
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // Utilities
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.apache.commons:commons-lang3'
    
    // Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.11'
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    
    // YAML processing
    implementation 'org.yaml:snakeyaml:2.2'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
}

application {
    mainClass = 'com.dbcleanup.DatabaseCleanupApplication'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

checkstyle {
    toolVersion = '10.14.0'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

bootJar {
    archiveFileName = "dbcleanup-${version}.jar"
}

shadowJar {
    archiveBaseName.set('dbcleanup')
    archiveClassifier.set('')
    mergeServiceFiles()
}

// Enable Gradle Daemon
gradle.startParameter.daemon = true

// Enable parallel execution
gradle.startParameter.parallel = true

// Enable build cache
gradle.startParameter.buildCacheEnabled = true
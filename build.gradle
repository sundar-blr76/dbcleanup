plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
    id 'checkstyle'
}

group = 'com'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.2.3"
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Database
    runtimeOnly 'org.postgresql:postgresql'
    testRuntimeOnly 'com.h2database:h2'
    
    // Utilities
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // YAML processing
    implementation 'org.yaml:snakeyaml'
    
    // Logging
    implementation 'ch.qos.logback:logback-classic'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

checkstyle {
    toolVersion = '10.14.0'
    configFile = file("config/checkstyle/checkstyle.xml")
    maxWarnings = 0
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

bootJar {
    archiveFileName = "dbcleanup-${version}.jar"
}

// Ensure proper classpath configuration
tasks.named('compileJava') {
    classpath = configurations.compileClasspath
}

sonar {
    properties {
        property 'sonar.projectKey', 'dbcleanup'
        property 'sonar.projectName', 'Database Cleanup'
        property 'sonar.host.url', 'http://localhost:9000'
        property 'sonar.token', 'sqp_your_token_here'
    }
} 